/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "gpu-discovery/apis/scheduling/v1beta1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GPULister helps list GPUs.
// All objects returned here must be treated as read-only.
type GPULister interface {
	// List lists all GPUs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.GPU, err error)
	// GPUs returns an object that can list and get GPUs.
	GPUs(namespace string) GPUNamespaceLister
	GPUListerExpansion
}

// gPULister implements the GPULister interface.
type gPULister struct {
	indexer cache.Indexer
}

// NewGPULister returns a new GPULister.
func NewGPULister(indexer cache.Indexer) GPULister {
	return &gPULister{indexer: indexer}
}

// List lists all GPUs in the indexer.
func (s *gPULister) List(selector labels.Selector) (ret []*v1beta1.GPU, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GPU))
	})
	return ret, err
}

// GPUs returns an object that can list and get GPUs.
func (s *gPULister) GPUs(namespace string) GPUNamespaceLister {
	return gPUNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GPUNamespaceLister helps list and get GPUs.
// All objects returned here must be treated as read-only.
type GPUNamespaceLister interface {
	// List lists all GPUs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.GPU, err error)
	// Get retrieves the GPU from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.GPU, error)
	GPUNamespaceListerExpansion
}

// gPUNamespaceLister implements the GPUNamespaceLister
// interface.
type gPUNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GPUs in the indexer for a given namespace.
func (s gPUNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.GPU, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.GPU))
	})
	return ret, err
}

// Get retrieves the GPU from the indexer for a given namespace and name.
func (s gPUNamespaceLister) Get(name string) (*v1beta1.GPU, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("gpu"), name)
	}
	return obj.(*v1beta1.GPU), nil
}
